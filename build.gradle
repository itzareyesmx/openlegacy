buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
        classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

plugins {
	id 'org.springframework.boot' version '2.1.5.RELEASE'
	id 'java'
    id "war"
    id "com.github.node-gradle.node" version "1.3.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

group = 'com.openlegacy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

bootWar {
    mainClassName = "com.openlegacy.InventoryOpenApplication"
    includes = ["WEB-INF/**", "META-INF/**"]
}

war {
    webAppDirName = "build/resources/main/static/"
    enabled = true
    extension = "war.original"
    includes = ["WEB-INF/**", "META-INF/**"]
}

springBoot {
    mainClassName = "com.openlegacy.InventoryOpenApplication"
}


repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "5.4.1"
}

if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

task buildDocker(type: Docker) {
  baseImage = 'itza/java:latest'
  push = project.hasProperty('push')
  tag = 'itzareyesmx/open'
  addFile {
    from jar
    rename {'app.jar'}
  }
  entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
  // exposePort(8080)
}

buildDocker.dependsOn(build)
